name: Deploy Staging ðŸš€

on:
  push:
    branches:
      - main

jobs:
  deploy_staging:
    name: Deploy to staging server
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Execute deployment command
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER_NAME_STAGING }}
          key: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
          script: |
            # Debug SSH setup
            echo "Setting up SSH..."
            
            # Clear existing SSH settings
            rm -rf ~/.ssh
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            
            # Setup GitHub SSH key
            echo "${{ secrets.GITHUB_SSH_KEY }}" > ~/.ssh/github_deploy_key
            chmod 600 ~/.ssh/github_deploy_key
            
            # Setup SSH config
            cat > ~/.ssh/config << EOF
            Host github.com
                HostName github.com
                User git
                IdentityFile ~/.ssh/github_deploy_key
                StrictHostKeyChecking no
            EOF
            chmod 600 ~/.ssh/config
            
            # Test SSH connection
            ssh -T git@github.com || true
            
            # Setup Git config
            git config --global user.email "your-email@example.com"
            git config --global user.name "Your Name"
            
            # Debug: Print working directory
            echo "Current directory: $(pwd)"
            
            # Create and setup directory
            sudo mkdir -p ${{ vars.APP_STG_PATH }}
            sudo chown $USER:$USER ${{ vars.APP_STG_PATH }}
            
            # Clone or update repository
            if [ -d "${{ vars.APP_STG_PATH }}/.git" ]; then
              echo "Updating existing repository..."
              cd ${{ vars.APP_STG_PATH }}
              git fetch origin
              git reset --hard origin/main
            else
              echo "Cloning new repository..."
              # Using GIT_SSH_COMMAND to specify the key
              GIT_SSH_COMMAND='ssh -i ~/.ssh/github_deploy_key -o StrictHostKeyChecking=no' \
              git clone ${{ secrets.GIT_URL }} ${{ vars.APP_STG_PATH }}
              cd ${{ vars.APP_STG_PATH }}
            fi
            
            # Generate .env file
            cat > .env << EOL
            APP_STG_PORT=${{ secrets.APP_STG_PORT }}
            MINIO_STG_ENDPOINT=${{ secrets.MINIO_STG_ENDPOINT }}
            MINIO_STG_ACCESS_KEY=${{ secrets.MINIO_STG_ACCESS_KEY }}
            MINIO_STG_SECRET_KEY=${{ secrets.MINIO_STG_SECRET_KEY }}
            EOL
            
            # Docker deployment
            sudo docker compose down pacmusic-stg || true
            sudo docker compose up -d --build pacmusic-stg
            
            # Verify deployment
            echo "Waiting for container to start..."
            sleep 10
            
            if ! sudo docker compose ps | grep -q "pacmusic-stg.*Up"; then
              echo "Container status:"
              sudo docker compose ps
              echo "Container logs:"
              sudo docker compose logs pacmusic-stg
              exit 1
            fi