name: Deploy Staging ðŸš€

on:
  push:
    branches:
      - main

jobs:
  deploy_staging:
    name: Deploy to staging server
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Execute deployment command
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER_NAME_STAGING }}
          key: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
          script: |
            # Setup SSH for GitHub
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Create directory if it doesn't exist
            sudo mkdir -p ${{ vars.APP_STG_PATH }}
            sudo chown $USER:$USER ${{ vars.APP_STG_PATH }}

            # Deployment logic with better error handling
            if [ -d "${{ vars.APP_STG_PATH }}/.git" ]; then
              echo "Repository exists, updating..."
              cd ${{ vars.APP_STG_PATH }}
              
              # Ensure clean state
              git reset --hard
              git clean -fd
              
              # Pull latest changes
              if ! git pull origin main; then
                echo "Failed to pull updates"
                exit 1
              fi
            else
              echo "Cloning repository..."
              if ! git clone ${{ secrets.GIT_URL }} ${{ vars.APP_STG_PATH }}; then
                echo "Failed to clone repository"
                exit 1
              fi
              cd ${{ vars.APP_STG_PATH }}
            fi

            # Stop existing containers
            if sudo docker compose ps | grep pacmusic-stg; then
              sudo docker compose down pacmusic-stg || true
            fi

            # Generate .env file (with overwrite)
            cat > .env << EOL
            APP_STG_PORT=${{ secrets.APP_STG_PORT }}
            MINIO_STG_ENDPOINT=${{ secrets.MINIO_STG_ENDPOINT }}
            MINIO_STG_ACCESS_KEY=${{ secrets.MINIO_STG_ACCESS_KEY }}
            MINIO_STG_SECRET_KEY=${{ secrets.MINIO_STG_SECRET_KEY }}
            EOL

            # Build and deploy
            sudo docker compose up -d --build pacmusic-stg
            
            # Check if container is running
            if ! sudo docker compose ps | grep -q "pacmusic-stg.*Up"; then
              echo "Container failed to start"
              sudo docker compose logs pacmusic-stg
              exit 1
            fi

      - name: Verify Deployment
        run: |
          # Wait for application to start
          sleep 20
          
          # Try to connect multiple times
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            if curl -f ${{ secrets.STG_URL }}; then
              echo "Successfully connected to application"
              exit 0
            fi
            
            attempt=$((attempt + 1))
            [ $attempt -le $max_attempts ] && sleep 10
          done
          
          echo "Failed to connect to application after $max_attempts attempts"
          exit 1